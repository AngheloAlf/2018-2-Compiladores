
PROGRAM:
    DECLARATION_LIST
    ;


DECLARATION_LIST:
    DECLARATION_LIST DECLARATION  
    | DECLARATION
    ;

DECLARATION:
    VAR_DEC
    | FUN_DEC
    ;

VAR_DEC:
    TYPE_SPECIFIER < id> ;
    | TYPE_SPECIFIER *<id> 
    | TYPE_SPECIFIER <id>[ <num> ] ;
    ;

TYPE_SPECIFIER:
    int
    | void
    | string
    ;

FUN_DEC:
    TYPE_SPECIFIER <id> (PARAMS) COMPOUND_STMT
    ;

PARAMS:
    void
    | PARAM_LIST
    ;

PARAM_LIST:
    PARAM_LIST, PARAM 
    | PARAM
    ;

PARAM:
    TYPE_SPECIFIER <id>
    | TYPE_SPECIFIER *<id>
    | TYPE_SPECIFIER <id> [ ]
    ;

COMPOUND_STMT:
    {LOCAL_DECS STATEMENT_LIST}
    ;

LOCAL_DECS:
    LOCAL_DECS VAR_DEC
    | %empty
    ;

STATEMENT_LIST:
    STATEMENT_LIST STATEMENT
    | %empty
    ;

STATEMENT:
    EXPRESSION_STMT 
    | COMPOUND_STMT 
    | IF_STMT
    | WHILE_STMT
    | RETURN_STMT
    | WRITE_STMT
    ;

EXPRESSION_STMT:
    EXPRESSION;
    | ;
    ;

IF_STMT:
    if(EXPRESSION) STATEMENT
    | if(EXPRESSION) STATEMENT else STATEMENT
    ;

WHILE_STMT:
    while(EXPRESSION) statement
    ;

RETURN_STMT:
    return ;
    | return EXPRESSION;
    ;

WRITE_STMT:
    write (EXRESSION);
    | writeln (  ) ;
    ;

EXPRESSION:
    VAR = EXPRESSION  
    | COMP_EXP
    ;

VAR:
    <id>
    | <id>[EXPRESSION] 
    | *<id>
    ;

COMP_EXP:
    E  RELOP  E
    | E
    ;

RELOP:
    <=
    |  
    < 
    | 
    ==
    | 
    !=
    |  
    >
    |  
    >=
    ;

E:
    E ADDOP T
    | T
    ;

ADDOP:
    +
    | -
    ;

T:
    T MULOP F 
    | F
    ;

MULOP:
    *
    | /
    | %
    ;

F:
    -F
    | &Factor 
    | *Factor
    | Factor
    ;

Factor:
    (EXPRESSION)
    | FUN_CALL
    | read()
    | *<id>
    | <id>
    | <id>[EXPRESSION]
    | <num>
    | <string>
    ;

FUN_CALL:
    <id> (ARGS)
    ;

ARGS: 
    ARG_LIST
    | %empty
    ;

ARG_LIST:
    ARG_LIST, EXPRESSION 
    | EXPRESSION
    ;










test:
	test INT_VALUE      { printf("line %i:\tINTEGER: %i\n", lineCounter, $2); }
	| test STRING_VALUE { printf("line %i:\tSTRING: %s\n", lineCounter, $2); }
	| INT_VALUE            { printf("line %i:\tINTEGER: %i\n", lineCounter, $1); }
	| STRING_VALUE         { printf("line %i:\tSTRING: %s\n", lineCounter, $1); }
    | test TYPE_VALUE       { printf("line %i:\t%s\n", lineCounter, $2);}
    | var_declar
    | test IDENTIF          {printf("line %i:\t%s\n", lineCounter, $2);}
    | IDENTIF                {printf("line %i:\t%s\n", lineCounter, $1);}
    ;

var_declar:
    TYPE_VALUE IDENTIF           { printf("line %i:\t%s %s\n", lineCounter, $1, $2);}
    ;

